# -*- coding: utf-8 -*-
"""ProssimoTech_project_june14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yy4I8q3UX9Cj-Jk1rHxL8cn8rogMnqj_
"""
# Commented out IPython magic to ensure Python compatibility.
#@title *import packages & mtfa implementation*
#  %%capture

######### Required Modules ##########
import numpy as np
import matplotlib.pyplot as plt
#from scipy.linalg import eigh
from Model import helper


######### string-function dict ##########

axis_function_dict = {
  'volatility': helper.volatility,
  'dispersion': helper.dispersion,
}


# Input: 
#   handler: class data_handler.
#   model: str
#   freq: str
#   x_axis: str
#   y_axis: str
#   num: int
def plot(handler, model, freq, x_axis, y_axis, num):
  # 1. Add some comments
  # 2. Can be more abstract. Not necessarily just the data_handler.
  # 3. What more functions to add into the plotter? 
  x_values = None
  if x_axis == "time":
    x_values = range(handler.start_year, handler.end_year+1)
  else:
    x_values = axis_function_dict[x_axis](handler, model, freq)
  y_values = axis_function_dict[y_axis](handler, model, freq)
  
  xy_pair_arr = []
  for i in range(len(x_values)):
    xy_pair_arr.append((x_values[i], y_values[i]))
  xy_pair_arr.sort()

  x = []
  y = []

  for i in range(len(xy_pair_arr)):
    x.append(xy_pair_arr[i][0])
    y.append(xy_pair_arr[i][1])

  plt.figure(num)
  plt.title(y_axis + " vs. " + x_axis)
  plt.plot(x, y)
  plt.xlabel(x_axis)
  plt.ylabel(y_axis)


# show all previous figure
def show():
  plt.show()


# close figure specific by var
def close(var):
  plt.close(var)


###### Generate matrix plots ######
# @title *plot cov*
# Chang Yuan's version
def plot_cov(df, centered = True, title ='fig.png'):
  years = range(df.start_year, df.end_year+1)
  fig, ax = plt.subplots(len(years), 3, figsize = (12, 6*len(years)))
  for j, year in enumerate(years):
    df_ = df[df.index.year == year].dropna(axis = 'columns')
    S = helper.r2S(df_, cor = False, centered = centered) # sample cov
    print(S.shape)
    R = helper.cov2cor(S) # correlation
    print(R.shape)
    im =ax[j, 0].matshow(S, cmap = 'GnBu')
    ax[j, 0].set_title(f'Sample covariance {year}')
    fig.colorbar(im, ax =ax[j, 0], shrink = 1)
    
    im = ax[j, 1].matshow(R, cmap = 'GnBu')
    ax[j, 1].set_title('correlation')
    fig.colorbar(im, ax =ax[j, 1], shrink = 0.8)
    
    P = np.linalg.pinv(S) # precision by pseudo inverse
    im = ax[j, 2].matshow(P, cmap = 'GnBu')
    ax[j, 2].set_title('precision')
    fig.colorbar(im, ax= ax[j, 2], shrink = 0.8)
  plt.show()
  #fd(fig, name = title)
  #fig.savefig(title, transparent=False)
  pass

